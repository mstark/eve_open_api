=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.7.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module EVEOpenAPI
  # 200 ok object
  class GetCorporationsCorporationIdStarbases200Ok
    # Unique ID for this starbase (POS)
    attr_accessor :starbase_id

    # Starbase (POS) type
    attr_accessor :type_id

    # The solar system this starbase (POS) is in, unanchored POSes have this information
    attr_accessor :system_id

    # The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
    attr_accessor :moon_id

    # state string
    attr_accessor :state

    # When the POS started unanchoring, for starbases (POSes) in unanchoring state
    attr_accessor :unanchor_at

    # When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
    attr_accessor :reinforced_until

    # When the POS onlined, for starbases (POSes) in online state
    attr_accessor :onlined_since

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'starbase_id' => :'starbase_id',
        :'type_id' => :'type_id',
        :'system_id' => :'system_id',
        :'moon_id' => :'moon_id',
        :'state' => :'state',
        :'unanchor_at' => :'unanchor_at',
        :'reinforced_until' => :'reinforced_until',
        :'onlined_since' => :'onlined_since'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'starbase_id' => :'Integer',
        :'type_id' => :'Integer',
        :'system_id' => :'Integer',
        :'moon_id' => :'Integer',
        :'state' => :'String',
        :'unanchor_at' => :'DateTime',
        :'reinforced_until' => :'DateTime',
        :'onlined_since' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'starbase_id')
        self.starbase_id = attributes[:'starbase_id']
      end

      if attributes.has_key?(:'type_id')
        self.type_id = attributes[:'type_id']
      end

      if attributes.has_key?(:'system_id')
        self.system_id = attributes[:'system_id']
      end

      if attributes.has_key?(:'moon_id')
        self.moon_id = attributes[:'moon_id']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'unanchor_at')
        self.unanchor_at = attributes[:'unanchor_at']
      end

      if attributes.has_key?(:'reinforced_until')
        self.reinforced_until = attributes[:'reinforced_until']
      end

      if attributes.has_key?(:'onlined_since')
        self.onlined_since = attributes[:'onlined_since']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @starbase_id.nil?
        invalid_properties.push("invalid value for 'starbase_id', starbase_id cannot be nil.")
      end

      if @type_id.nil?
        invalid_properties.push("invalid value for 'type_id', type_id cannot be nil.")
      end

      if @system_id.nil?
        invalid_properties.push("invalid value for 'system_id', system_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @starbase_id.nil?
      return false if @type_id.nil?
      return false if @system_id.nil?
      state_validator = EnumAttributeValidator.new('String', ["offline", "online", "onlining", "reinforced", "unanchoring"])
      return false unless state_validator.valid?(@state)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["offline", "online", "onlining", "reinforced", "unanchoring"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          starbase_id == o.starbase_id &&
          type_id == o.type_id &&
          system_id == o.system_id &&
          moon_id == o.moon_id &&
          state == o.state &&
          unanchor_at == o.unanchor_at &&
          reinforced_until == o.reinforced_until &&
          onlined_since == o.onlined_since
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [starbase_id, type_id, system_id, moon_id, state, unanchor_at, reinforced_until, onlined_since].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EVEOpenAPI.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
