=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.2.6.dev1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module EveOpenApi
  class MarketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List market prices
    # Return a list of prices  ---  Alternate route: `/v1/markets/prices/`  Alternate route: `/legacy/markets/prices/`  Alternate route: `/dev/markets/prices/`   ---  This route is cached for up to 3600 seconds
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @return [Array<GetMarketsPrices200Ok>]
    def get_markets_prices(opts = {})
      data, _status_code, _headers = get_markets_prices_with_http_info(opts)
      return data
    end

    # List market prices
    # Return a list of prices  ---  Alternate route: &#x60;/v1/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/dev/markets/prices/&#x60;   ---  This route is cached for up to 3600 seconds
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @return [Array<(Array<GetMarketsPrices200Ok>, Fixnum, Hash)>] Array<GetMarketsPrices200Ok> data, response status code and response headers
    def get_markets_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketApi.get_markets_prices ..."
      end
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/markets/prices/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetMarketsPrices200Ok>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_markets_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List historical market statistics in a region
    # Return a list of historical market statistics for the specified type in a region  ---  Alternate route: `/v1/markets/{region_id}/history/`  Alternate route: `/legacy/markets/{region_id}/history/`  Alternate route: `/dev/markets/{region_id}/history/`   ---  This route is cached for up to 300 seconds
    # @param region_id Return statistics in this region
    # @param type_id Return statistics for this type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @return [Array<GetMarketsRegionIdHistory200Ok>]
    def get_markets_region_id_history(region_id, type_id, opts = {})
      data, _status_code, _headers = get_markets_region_id_history_with_http_info(region_id, type_id, opts)
      return data
    end

    # List historical market statistics in a region
    # Return a list of historical market statistics for the specified type in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;   ---  This route is cached for up to 300 seconds
    # @param region_id Return statistics in this region
    # @param type_id Return statistics for this type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @return [Array<(Array<GetMarketsRegionIdHistory200Ok>, Fixnum, Hash)>] Array<GetMarketsRegionIdHistory200Ok> data, response status code and response headers
    def get_markets_region_id_history_with_http_info(region_id, type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketApi.get_markets_region_id_history ..."
      end
      # verify the required parameter 'region_id' is set
      fail ArgumentError, "Missing the required parameter 'region_id' when calling MarketApi.get_markets_region_id_history" if region_id.nil?
      # verify the required parameter 'type_id' is set
      fail ArgumentError, "Missing the required parameter 'type_id' when calling MarketApi.get_markets_region_id_history" if type_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/markets/{region_id}/history/".sub('{format}','json').sub('{' + 'region_id' + '}', region_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type_id'] = type_id
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetMarketsRegionIdHistory200Ok>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_markets_region_id_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List orders in a region
    # Return a list of orders in a region  ---  Alternate route: `/v1/markets/{region_id}/orders/`  Alternate route: `/legacy/markets/{region_id}/orders/`  Alternate route: `/dev/markets/{region_id}/orders/`   ---  This route is cached for up to 300 seconds
    # @param region_id Return orders in this region
    # @param order_type Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :type_id Return orders only for this type
    # @option opts [Integer] :page Which page to query, only used for querying without type_id. Starting at 1  (default to 1)
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @return [Array<GetMarketsRegionIdOrders200Ok>]
    def get_markets_region_id_orders(region_id, order_type, opts = {})
      data, _status_code, _headers = get_markets_region_id_orders_with_http_info(region_id, order_type, opts)
      return data
    end

    # List orders in a region
    # Return a list of orders in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;   ---  This route is cached for up to 300 seconds
    # @param region_id Return orders in this region
    # @param order_type Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :type_id Return orders only for this type
    # @option opts [Integer] :page Which page to query, only used for querying without type_id. Starting at 1 
    # @option opts [String] :datasource The server name you would like data from
    # @return [Array<(Array<GetMarketsRegionIdOrders200Ok>, Fixnum, Hash)>] Array<GetMarketsRegionIdOrders200Ok> data, response status code and response headers
    def get_markets_region_id_orders_with_http_info(region_id, order_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketApi.get_markets_region_id_orders ..."
      end
      # verify the required parameter 'region_id' is set
      fail ArgumentError, "Missing the required parameter 'region_id' when calling MarketApi.get_markets_region_id_orders" if region_id.nil?
      # verify the required parameter 'order_type' is set
      fail ArgumentError, "Missing the required parameter 'order_type' when calling MarketApi.get_markets_region_id_orders" if order_type.nil?
      # verify enum value
      unless ['buy', 'sell', 'all'].include?(order_type)
        fail ArgumentError, "invalid value for 'order_type', must be one of buy, sell, all"
      end
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/markets/{region_id}/orders/".sub('{format}','json').sub('{' + 'region_id' + '}', region_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'order_type'] = order_type
      query_params[:'type_id'] = opts[:'type_id'] if !opts[:'type_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetMarketsRegionIdOrders200Ok>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_markets_region_id_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
